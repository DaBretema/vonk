# ------------------------------------------------------------------------- #
# GLOBAL SETTINGS
# ------------------------------------------------------------------------- #

cmake_minimum_required(VERSION 3.0)
set(CMAKE_MESSAGE_LOG_LEVEL "WARNING")

project(Vonk)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON) # Makefile and Ninja only

set(CMAKE_CXX_FLAGS "")
set(CMAKE_CXX_FLAGS_RELEASE "-O3")
set(CMAKE_CXX_FLAGS_DEBUG "-O0 -g3 -ggdb -Wall -Wpedantic -Wextra -Wrange-loop-construct")


# ------------------------------------------------------------------------- #
# GLOBAL FUNCTIONS
# ------------------------------------------------------------------------- #

function(COPY_FROM_TO_DIR src_dir dst_dir)
    file(GLOB src_files ${src_dir}/*)
    foreach(src_file IN LISTS src_files)
        get_filename_component(file_and_ext ${src_file} NAME)
        set(dst_file ${dst_dir}/${file_and_ext})
        add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy ${src_file} ${dst_file})
    endforeach()
endfunction()

function(ADD_EXE_TEST test_name)
    add_executable(${test_name} test/${test_name}.cpp)
    target_link_libraries(${test_name} PRIVATE ${project_libs} ${PROJECT_NAME})
    add_test(COMMAND ${test_name})
endfunction()


# ------------------------------------------------------------------------- #
# THIRD PARTY
# ------------------------------------------------------------------------- #

# DOCS
set (FMT_DOC "")
set (GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
set (ASSIMP_BUILD_DOCS OFF CACHE BOOL "" FORCE)

# VULKAN
find_package(Vulkan REQUIRED COMPONENTS glslc)  # 'glslc' for shader pre-compilation
find_program(glslc_executable NAMES glslc HINTS Vulkan::glslc)

# ASSIMP
## Static
set (ASSIMP_BUILD_SHARED_LIBS OFF BOOL)
## Disable extras
set (ASSIMP_INSTALL OFF CACHE BOOL "" FORCE)
set (ASSIMP_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set (ASSIMP_BUILD_ASSIMP_TOOLS OFF CACHE BOOL "" FORCE)
## Disable importers/exporters
set (ASSIMP_NO_EXPORT ON CACHE BOOL "" FORCE)
set (ASSIMP_BUILD_ALL_IMPORTERS_BY_DEFAULT OFF CACHE BOOL "" FORCE)
# ## Enable selected importers
# set (ASSIMP_BUILD_GLFT_IMPORTER ON BOOL)
set (ASSIMP_BUILD_FBX_IMPORTER ON BOOL)
# set (ASSIMP_BUILD_OBJ_IMPORTER ON BOOL)

# ADD FOLDERS
add_subdirectory(vendor/fmt)
add_subdirectory(vendor/glm)
add_subdirectory(vendor/glfw)
add_subdirectory(vendor/assimp)

set(project_libs_incl ${Vulkan_INCLUDE_DIRS})
set(project_libs fmt glm glfw assimp ${Vulkan_LIBRARIES})


# ------------------------------------------------------------------------- #
# SHADERS COMPILATION AND COPY
# ------------------------------------------------------------------------- #

set(shaders_src_dir "${CMAKE_SOURCE_DIR}/assets/shaders")
set(shaders_bin_dir "${CMAKE_BINARY_DIR}/assets/shaders")

file(GLOB shaders_list ${shaders_src_dir}/*)

add_custom_command( COMMAND
    ${CMAKE_COMMAND} -E remove_directory ${shaders_bin_dir}
    ${CMAKE_COMMAND} -E make_directory ${shaders_bin_dir}
  OUTPUT ${shaders_bin_dir}
)

foreach(shader_src IN LISTS shaders_list)
  get_filename_component(filename_and_ext ${shader_src} NAME)
  set(shader_dst ${shaders_bin_dir}/${filename_and_ext}.spv)
  add_custom_command(COMMAND ${glslc_executable} -o ${shader_dst} ${shader_src} OUTPUT ${shader_dst})
  list(APPEND shaders_spv_list ${shaders_bin_dir}/${filename_and_ext}.spv)
endforeach()

# # add_custom_target(shaders ALL DEPENDS ${shaders_spv_list}) # Seems like unneeded


# ------------------------------------------------------------------------- #
# PROJECT
# ------------------------------------------------------------------------- #

file(GLOB SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)
file(GLOB HEADER_FILES ${CMAKE_CURRENT_SOURCE_DIR}/include/*.h)

add_library(${PROJECT_NAME} STATIC ${shaders_spv_list} ${SOURCE_FILES} ${HEADER_FILES})

target_compile_features    ( ${PROJECT_NAME} PUBLIC cxx_std_20 ) # -> PRIVATE (??)
target_include_directories ( ${PROJECT_NAME} PUBLIC "./include" "./vendor" ${project_libs_incl}) # -> PRIVATE (??)
target_link_libraries      ( ${PROJECT_NAME} PUBLIC ${project_libs}                           ) # -> PRIVATE (??)


# ------------------------------------------------------------------------- #
# COPY MESHES ASSETS
# ------------------------------------------------------------------------- #

set(meshes_src_dir "${CMAKE_SOURCE_DIR}/assets/meshes")
set(meshes_bin_dir "${CMAKE_BINARY_DIR}/assets/meshes")

COPY_FROM_TO_DIR(${meshes_src_dir} ${meshes_bin_dir})


# ------------------------------------------------------------------------- #
# EXE and TESTING
# ------------------------------------------------------------------------- #

ADD_EXE_TEST(Sandbox)
