
# ------------------------------------------------------------------------- #
# GLOBAL SETTINGS
# ------------------------------------------------------------------------- #

cmake_minimum_required(VERSION 3.0)
set(CMAKE_MESSAGE_LOG_LEVEL "WARNING")

set(pName Vonsai)
project(${pName})

# set(CMAKE_CXX_STANDARD 20)
# set(CMAKE_CXX_EXTENSIONS OFF)
# set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON) # Makefile and Ninja only

set(CMAKE_CXX_FLAGS "")
set(CMAKE_CXX_FLAGS_RELEASE "-Ofast")
set(CMAKE_CXX_FLAGS_DEBUG "-O0 -g3 -ggdb -Wall -Wpedantic -Wextra")


# ------------------------------------------------------------------------- #
# THIRD PARTY
# ------------------------------------------------------------------------- #

# DOCS
set (FMT_DOC "")
set (GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
set (ASSIMP_BUILD_DOCS OFF CACHE BOOL "" FORCE)

# VULKAN
# find_package(Vulkan REQUIRED)
find_package(Vulkan REQUIRED COMPONENTS glslc)
find_program(glslc_executable NAMES glslc HINTS Vulkan::glslc)

# ASSIMP
## Static?
set (ASSIMP_BUILD_SHARED_LIBS OFF BOOL)
## Disable extras
set (ASSIMP_INSTALL OFF CACHE BOOL "" FORCE)
set (ASSIMP_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set (ASSIMP_BUILD_ASSIMP_TOOLS OFF CACHE BOOL "" FORCE)
## Disable importers/exporters
set (ASSIMP_NO_EXPORT ON CACHE BOOL "" FORCE)
set (ASSIMP_BUILD_ALL_IMPORTERS_BY_DEFAULT OFF CACHE BOOL "" FORCE)
## Enable selected importers
set (ASSIMP_BUILD_FBX_IMPORTER ON BOOL)
set (ASSIMP_BUILD_OBJ_IMPORTER ON BOOL)

# ADD FOLDERS
add_subdirectory(vendor/fmt)
add_subdirectory(vendor/glm)
add_subdirectory(vendor/glfw)
# add_subdirectory(vendor/assimp)

set(pLibsIncl ${Vulkan_INCLUDE_DIRS})
set(pLibs fmt glm glfw ${Vulkan_LIBRARIES})


# ------------------------------------------------------------------------- #
# Shader compilation
# ------------------------------------------------------------------------- #

set(SHADERS_SOURCE_DIR "./assets/shaders")
set(SHADERS_BINARY_DIR "./assets/shaders")

file(GLOB SHADERS
  ${SHADERS_SOURCE_DIR}/*.vert
  ${SHADERS_SOURCE_DIR}/*.frag
  ${SHADERS_SOURCE_DIR}/*.comp
  ${SHADERS_SOURCE_DIR}/*.geom
  ${SHADERS_SOURCE_DIR}/*.tesc
  ${SHADERS_SOURCE_DIR}/*.tese
#   ${SHADERS_SOURCE_DIR}/*.mesh
#   ${SHADERS_SOURCE_DIR}/*.task
#   ${SHADERS_SOURCE_DIR}/*.rgen
#   ${SHADERS_SOURCE_DIR}/*.rchit
#   ${SHADERS_SOURCE_DIR}/*.rmiss
  )

add_custom_command(
  COMMAND
    ${CMAKE_COMMAND} -E remove_directory ${SHADERS_BINARY_DIR}
    ${CMAKE_COMMAND} -E make_directory ${SHADERS_BINARY_DIR}
  OUTPUT ${SHADERS_BINARY_DIR}
  COMMENT "Creating ${SHADERS_BINARY_DIR}"
)

foreach(source IN LISTS SHADERS)
  get_filename_component(FILENAME ${source} NAME)
  add_custom_command(
    COMMAND
      ${glslc_executable}
      -o ${SHADERS_BINARY_DIR}/${FILENAME}.spv
      ${source}
    OUTPUT ${SHADERS_BINARY_DIR}/${FILENAME}.spv
    DEPENDS ${source} ${SHADERS_BINARY_DIR}
    COMMENT "Compiling ${FILENAME}"
  )
  list(APPEND SPV_SHADERS ${SHADERS_BINARY_DIR}/${FILENAME}.spv)
endforeach()

add_custom_target(shaders ALL DEPENDS ${SPV_SHADERS}) # Seems like unneeded


# ------------------------------------------------------------------------- #
# PROJECT
# ------------------------------------------------------------------------- #

file(GLOB SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)
file(GLOB HEADER_FILES ${CMAKE_CURRENT_SOURCE_DIR}/include/*.h)

add_library(${pName} STATIC ${SPV_SHADERS} ${SOURCE_FILES} ${HEADER_FILES})

target_compile_features(${pName} PUBLIC
    cxx_std_20
)


target_link_libraries(${pName} PRIVATE ${pLibs})
target_include_directories(${pName} PUBLIC "./src" "./include" "./vendor" ${pLibsIncl})


# ------------------------------------------------------------------------- #
# EXE and TESTING
# ------------------------------------------------------------------------- #

function(addTest tName)
    add_executable(${tName} test/${tName}.cpp)
    target_link_libraries(${tName} PRIVATE ${pLibs} ${pName})
    add_test(COMMAND ${tName})
endfunction()

addTest(Sandbox)
